# Generated by Django 2.2.7 on 2019-12-12 10:41

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(max_length=30, verbose_name='short name')),
                ('address', models.CharField(max_length=255, verbose_name='address')),
                ('coefficient', models.FloatField(default=0.6, verbose_name='rating coefficient')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'db_table': 'event',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, verbose_name='first name')),
                ('last_name', models.CharField(max_length=20, verbose_name='last name')),
                ('username', models.CharField(max_length=20, unique=True, verbose_name='username')),
                ('date_of_birth', models.DateField(verbose_name='date of birth')),
                ('city', models.CharField(max_length=20, verbose_name='city')),
                ('hand', models.CharField(choices=[('R', 'Right'), ('L', 'Left')], default='R', max_length=1)),
                ('equipment', models.TextField(verbose_name='equipment')),
                ('rating', models.FloatField(default=350)),
            ],
            options={
                'verbose_name': 'player',
                'verbose_name_plural': 'players',
                'db_table': 'player',
            },
        ),
        migrations.CreateModel(
            name='RatingHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, verbose_name='date')),
                ('rating', models.FloatField()),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Player', verbose_name='player')),
            ],
            options={
                'verbose_name': 'rating history',
                'verbose_name_plural': 'rating history',
                'db_table': 'ratinghistory',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField(verbose_name='event date')),
                ('winner_score', models.PositiveSmallIntegerField(verbose_name='winner score')),
                ('loser_score', models.PositiveSmallIntegerField(verbose_name='loser score')),
                ('winner_rating', models.FloatField(verbose_name='winner rating')),
                ('loser_rating', models.FloatField(verbose_name='loser rating')),
                ('delta', models.FloatField(verbose_name='rating delta')),
                ('is_technical', models.BooleanField(default=False, verbose_name='technical result')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Event', verbose_name='event')),
                ('loser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loser', to='core.Player', verbose_name='loser')),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='core.Player', verbose_name='winner')),
            ],
            options={
                'verbose_name': 'match result',
                'verbose_name_plural': 'match results',
                'db_table': 'match',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=40, null=True, verbose_name='phone number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
